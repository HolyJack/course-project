generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  providerAccountId String
  access_token      String?
  expires_at        Int?
  id_token          String?
  provider          String
  refresh_token     String?
  scope             String?
  session_state     String?
  token_type        String?
  type              String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  role          Role         @default(AUTHOR)
  accounts      Account[]
  collections   Collection[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Collection {
  id           Int           @id @default(autoincrement())
  title        String
  description  String
  topicId      Int
  imgageUrl    String?
  authorId     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  author       User          @relation(fields: [authorId], references: [id])
  topic        Topic         @relation(fields: [topicId], references: [id])
  customFields CustomField[]
  items        Item[]
}

model CustomField {
  id           Int                @id @default(autoincrement())
  type         CustomFieldTypes
  state        Boolean            @default(true)
  value        String
  collectionId Int
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  collection   Collection         @relation(fields: [collectionId], references: [id])
  values       CustomFieldValue[]
}

model CustomFieldValue {
  id            Int         @id @default(autoincrement())
  customFieldId Int
  itemId        Int
  intValue      Int?
  booleanValue  Boolean?
  dateValue     DateTime?
  stringValue   String?
  textValue     String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  customField   CustomField @relation(fields: [customFieldId], references: [id])
  item          Item        @relation(fields: [itemId], references: [id])
}

model Item {
  id                Int                @id @default(autoincrement())
  name              String
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  collectionId      Int
  customFieldValues CustomFieldValue[]
  collection        Collection         @relation(fields: [collectionId], references: [id])
  tags              TagsOnItems[]
}

model Tag {
  id        Int           @id @default(autoincrement())
  name      String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  items     TagsOnItems[]
}

model TagsOnItems {
  itemId    Int
  tagId     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  item      Item     @relation(fields: [itemId], references: [id])
  tag       Tag      @relation(fields: [tagId], references: [id])

  @@id([itemId, tagId])
}

model Topic {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  collections Collection[]
}

enum Role {
  AUTHOR
  ADMIN
}

enum CustomFieldTypes {
  INT
  DATE
  BOOLEAN
  STRING
  TEXT
}
